// @flow

/**
 * Convert raw header strings from Markdown into URL-friendly,
 * easy to read slugs
 * @summary Slug-maker
 * @class Slug
 * @author Sean W. Lawrence
 * @license MIT
 * @module slug
 * @todo Remove duplicate hyphens - right now if there are hyphens in the string,
 * and there are spaces around the hyphens, it will have muliple hyphens and formatting will break
 *
 */
class Slug {
  /**
   * Create a slug
   * @constructor
   * @param {string} rawSlug - Header string generated by parsing the Markdow
   */
  constructor(rawSlug) {
    this.rawSlug = rawSlug;
  }

  /**
   * Returns true if char is a letter of space, i.e. ' '
   * Since we can 'slugify' letters and empty spaces will be turned into hyphens!
   * Returns false if char is anything else
   * @summary Checks if char is a letter or space
   * @param {string} char - Single character
   * @returns {boolean} - If character is letter/space or not
   */
  isLetter(char) {
    switch (char) {
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
      case '-':
      case ' ':
        return true;
      default:
        return false;
    }
  }

  /**
   * Removes all characters that are not a letter,
   * trims whitespace from beginning/end,
   * and changes empty spaces in the string into hyphens so header links are url-friendly
   * and easy to read/share
   * @summary Formats header strings
   * @returns {string} - Formatted string
   */
  slugify() {
    /**
     * Converts the rawSlug string into an array of individual characters,
     * then loops over the array of characters and filters out any character
     * that is not a letter or blank space
     * then joins the characters back together to form a single string,
     * then replaces the blank space in the string with hyphens,
     * changes multiple whitespace intoa single whitespace character
     * and finally, removes the blank space from the beginning and ends of the string
     * @summary Slugifies the string
     * @function
     * @example slugify('Hello, world!') // 'hello-world'
     */
    return [...this.rawSlug]
      .map((char) => char.toLowerCase())
      .filter(this.isLetter)
      .join('')
      .trim()
      .replace(/\s\s+/g, ' ')
      .replace(/ /, '-');
  }
}

/**
 * @exports Slug
 */
export default Slug;
